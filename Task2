import nltk
from nltk.chat.util import Chat, reflections

pairs = [
    [r"my name is (.*)", ["Hello %1, how can I assist you today?"]],
    [r"hi|hey|hello", ["Hello, how can I help you?", "Hey there! What can I do for you?", "Hi! How can I assist you today?"]],
    [r"what is your name?|Can i know ur name?", ["I am a chatbot created to assist you. You can call me Chatbot."]],
    [r"how are you?", ["I'm a bot, so I don't have feelings, but I'm here to help you!"]],
    [r"can you help me with (.*)", ["Sure, I can help you with %1. Please provide more details."]],
    [r"sorry (.*)", ["It's okay. How can I assist you?"]],
    [r"thank you|thanks", ["You're welcome!", "No problem!", "Happy to help!"]],
    [r"bye,["Bye have a nice day!"]],
    [r"(.*)", ["I'm sorry, I don't understand that. Can you rephrase?", "Could you please elaborate on that?"]]
]
----- Defining the chatbot class--------
class RuleBasedChatbot:
    def __init__(self, pairs):
        self.chat = Chat(pairs, reflections)

    def respond(self, user_input):
        return self.chat.respond(user_input)
    
    def update_pairs(self, new_pairs):
        """Method to dynamically update the chatbot's response pairs."""
        self.chat._pairs.extend(new_pairs)
        print("Chatbot knowledge updated!")

--------# Function to chat with the bot--------
def chat_with_bot():
    chatbot = RuleBasedChatbot(pairs)  # Initialize the chatbot

    print("Hi, I'm your chatbot. Type 'quit' to exit. Type 'update' to add new knowledge.")
    
    while True:
        user_input = input("You: ")
        
        # If the user types 'quit', exit the chat
        if user_input.lower() == 'quit':
            print("Chatbot: Bye! Have a great day!")
            break
        
        # If the user types 'update', update the chatbot's knowledge
        elif user_input.lower() == 'update':
            print("Enter new patterns and responses (format: pattern, response). Type 'done' to finish.")
            new_pairs = []
            while True:
                pattern = input("Enter pattern: ")
                if pattern.lower() == 'done':
                    break
                response = input("Enter response: ")
                new_pairs.append((pattern, [response]))
            chatbot.update_pairs(new_pairs)
        
        # Otherwise, get a response from the chatbot
        else:
            response = chatbot.respond(user_input)
            print(f"Chatbot: {response}")
            
---------#start chatting with the bot------------
chat_with_bot()
